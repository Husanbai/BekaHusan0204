import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache
def load_and_prepare_data():
    df_fake = pd.read_csv("fake.csv")
    df_true = pd.read_csv("true.csv")

    df_fake['label'] = 1
    df_true['label'] = 0

    df = pd.concat([df_fake, df_true], ignore_index=True)
    df = df.dropna(subset=['label', 'text'])

    df.to_csv("fake_or_true_news.csv", index=False)
    return df

# --- –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ---
@st.cache
def train_model():
    df = load_and_prepare_data()
    X = df['text']
    y = df['label']

    vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
    X_vect = vectorizer.fit_transform(X)

    X_train, X_test, y_train, y_test = train_test_split(X_vect, y, test_size=0.2, random_state=42)

    model = LogisticRegression()
    model.fit(X_train, y_train)

    return model, vectorizer

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.set_page_config(page_title="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π", page_icon="üì∞")
st.title("üì∞ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
st.write("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ñ–µ–π–∫ —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç.")

user_input = st.text_area("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å:")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if 'model' not in st.session_state:
    st.session_state.model, st.session_state.vectorizer = train_model()

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"):
    if user_input.strip() == "":
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    else:
        vect = st.session_state.vectorizer.transform([user_input])
        prediction = st.session_state.model.predict(vect)[0]
        proba = st.session_state.model.predict_proba(vect)[0][prediction]

        result = "üö´ –§–ï–ô–ö" if prediction == 1 else "‚úÖ –ù–∞—Å—Ç–æ—è—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"
        st.subheader(result)
        st.caption(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: **{proba:.2f}**")
